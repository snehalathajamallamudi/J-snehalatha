# -*- coding: utf-8 -*-
"""Hand written digit prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ReT_AUX4UHRgGtzmvWoMLTmALgqm9sNO
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

from sklearn.datasets import load_digits

df = load_digits()

_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10,3))
for ax, image, label in zip(axes, df.images, df.target):
  ax.set_axis_off()
  ax.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
  ax.set_title("Training: %i" % label)

df.images.shape

df.images[0]

df.images[0].shape

len(df.images)

n_samples=len(df.images)
data=df.images.reshape((n_samples, -1))

data[0]

data[0].shape

data.shape

data.min()

data.max()

data = data/16

data.min()

data.max()

data[0]
np.array([0.    , 0.    , 0.3125, 0.8125, 0.5265, 0.0625, 0.    , 0.    ,
       0.    , 0.    , 0.8125, 0.9375, 0.625 , 0.9375, 0.3125, 0.    ,
       0.    , 0.8175, 0.9375, 0.125 , 0.    , 0.6875, 0.5   , 0.    ,
       0.    , 0.25  , 0.75  , 0.    , 0.    , 0.5   , 0.5   , 0.    ,
       0.    , 0.25  , 0.5   , 0.    , 0.    , 0.5625, 0.5   , 0.    ,
       0.    , 0.125 , 0.875 , 0.3125, 0.625 , 0.    , 0.75  , 0.    ,
       0.    , 0.    , 0.375 , 0.8125, 0.625 , 0.    , 0.    , 0.    ])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(data, df.target, test_size=0.3)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier()

rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)

y_pred
np.array([6, 5, 2, 6, 8, 8, 2, 7, 5, 1, 1, 4, 3, 7, 2, 0, 0, 7, 0, 2, 5, 3, 2, 5, 2, 7, 5, 9, 1, 8, 3, 3, 1, 1, 8, 4, 0, 4, 2, 1, 3, 1, 6, 9, 8, 8, 6, 7, 5, 4, 3, 8, 5, 0, 6, 0, 7, 1, 1, 1, 6, 1, 9, 3, 8, 8, 8, 1, 5, 0, 6, 2, 5, 9, 3, 5, 6, 0, 3, 5, 4, 0, 4, 1, 9, 1, 1, 3, 0, 3, 7, 1, 6, 3, 9, 7, 2, 9, 6, 2, 7, 0, 6, 9, 9, 3, 5, 4, 4, 6, 3, 6, 2, 3, 9, 6, 3, 7, 2, 7, 3, 1, 3, 6, 1, 9, 0, 5, 2, 9, 6, 1, 3, 4, 1, 6, 7, 2, 8, 8, 2, 7, 7, 0, 7, 1, 2, 5, 0, 0, 3, 1, 5, 8, 0, 3, 0, 1, 5, 5, 4, 8, 0, 7, 9, 5, 5, 5, 6, 4, 3, 6, 9, 3, 6, 0, 2, 5, 9, 5, 7, 6, 4, 2, 2, 5, 7, 7, 2, 0, 8, 1, 0, 7, 6, 7, 2, 7, 6, 6, 1, 4, 4, 7, 5, 0, 2, 9, 8, 4, 0, 0, 8, 1, 9, 4, 2, 4, 6, 1, 0, 4, 5, 1, 6, 3, 1, 4, 8, 3, 7, 3, 3, 8, 9, 1, 2, 5, 5, 0, 7, 1, 2, 7, 3, 0, 7, 9, 4, 7, 3, 5, 8, 1, 3, 3, 3, 6, 8, 3, 3, 6, 1, 1, 3, 7, 8, 6, 9, 9, 6, 7, 0, 3, 9, 8, 0, 7, 9, 2, 7, 1, 5, 3, 2, 2, 1, 4, 2, 5, 2, 0, 9, 5, 1, 2, 1, 8, 8, 3, 0, 8, 4, 2, 9, 8, 3, 2, 6, 7, 1, 1, 4, 8, 9, 5, 1, 5, 6, 4, 0, 7, 3, 7, 4, 7, 7, 9, 5, 0, 5, 0, 9, 2, 0, 1, 1, 9, 3, 7, 4, 7, 0, 0, 3, 9, 6, 2, 8, 8, 9, 0, 6, 7, 1, 2, 6, 3, 9, 8, 1, 6, 9, 3, 5, 1, 6, 6, 7, 9, 1, 0, 1, 2, 5, 2, 1, 4, 2, 8, 9, 5, 1, 7, 3, 2, 0, 9, 8, 3, 6, 4, 2, 2, 9, 1, 2, 8, 4, 0, 4, 2, 8, 3, 8, 0, 6, 2, 0, 1, 5, 7, 6, 5, 5, 8, 6, 5, 5, 6, 2, 5, 8, 8, 4, 7, 4, 0, 7, 0, 0, 2, 0, 8, 4, 8, 1, 6, 4, 2, 7, 0, 4, 7, 1, 1, 1, 2, 6, 2, 8, 6, 1, 9, 1, 2, 0, 3, 6, 0, 5, 5, 9, 7, 0, 4, 7, 1, 1, 1, 2, 6, 2, 8, 6, 1, 9, 1, 2, 0, 3, 6, 0, 5, 5, 9, 7, 0, 0, 6, 3, 4, 5, 3, 9, 9, 8, 1, 2, 4, 4, 5, 4, 2, 5, 0, 6, 9, 3, 1, 5, 0, 5, 7, 2, 2, 6, 5, 2, 4, 9, 7, 3, 8, 5, 1, 2, 0, 5, 2, 9, 2, 3, 4, 8, 5, 7, 7, 4, 0, 0, 1, 9, 2, 1, 6, 7, 3, 8, 7, 5, 2, 0, 5, 0, 0, 4, 0, 5, 5, 7, 9, 3,   ])

from sklearn.metrics import confusion_matrix, classification_report

confusion_matrix(y_test, y_pred)
np.array([[60, 0, 0, 0, 1, 0, 0, 0, 0, 0,],
       [0, 60, 0, 1, 0, 0, 0, 0, 0, 0,],
       [0, 0, 61, 0, 0, 0, 0, 0, 0, 1,],
       [0, 0, 0, 54, 0, 0, 0, 1, 0, 0,],
       [0, 0, 0, 0, 40, 0, 0, 1, 0, 0,],
       [0, 0, 0, 0, 0, 58, 1, 0, 1, 0,],
       [0, 1, 0, 0, 1, 0, 50, 0, 0, 0,],
       [0, 0, 0, 0, 0, 0, 0, 52, 0, 0,],
       [0, 2, 0, 0, 1, 1, 0, 0, 46, 0,],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 45,]])

print (classification_report(y_test, y_pred))